type Query {
    users: String
    findAll: [TestResponse!]!
    findByTestId(id: ID!) : TestResponse
    refreshToken(refreshToken: String!): AuthenticationResponse
}

type Mutation{
    signUp(email: String!, firstName: String!, lastName: String!, password: String!): AuthenticationResponse
    signIn(email: String!, password: String!): AuthenticationResponse
    createTest(testRequest: TestRequest!): SimpleResponse!
    updateTest(id: ID!, testRequest: TestRequest!): SimpleResponse!
    deleteTest(id: ID!) : ID
    authenticateWithGoogle(tokenId: String!): AuthenticationResponse
    saveQuestion(request: QuestionMainRequest): SimpleResponse
}

type AuthenticationResponse {
    email: String
    token: String!
    refreshToken: String!
    role: Role
}

enum Role {
    ADMIN,
    USER
}

enum QuestionType {
    SELECT_ENGLISH_WORD,
    TYPE_WHAT_YOU_HEAR,
    DESCRIBE_IMAGE,
    LISTEN_AND_SELECT_ENGLISH_WORD,
    RECORD_SAYING_STATEMENT,
    RESPOND_N_WORDS,
    HIGHLIGHT_THE_ANSWER,
    SELECT_THE_MAIN_IDEA,
    SELECT_BEST_TITLE
}

type TestResponse {
    id: ID!
    title: String!
    description: String!
    enable: Boolean!
    duration: Int!
    questions: [QuestionResponse]
}
type QuestionResponse{
    title: String!
    questionType: QuestionType
    duration: Int
    enable: Boolean

}

input TestRequest {
    title: String
    description: String
    enable: Boolean
    duration: Int
}

input QuestionMainRequest {
    questionType: QuestionType!
    testId: ID!
    title: String
    passage: String
    value: String
    correctAnswer: String
    statement: String
    duration: Int
    isActive: Boolean
    optionRequests: [OptionSelectMainIdeaRequest]
}

input OptionSelectMainIdeaRequest {
    value: String!
    isCorrect: Boolean!
}

type SimpleResponse{
    message : String!
}