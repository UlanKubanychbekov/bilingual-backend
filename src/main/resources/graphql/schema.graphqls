type Query {
    users: String
    findAll: [TestResponse!]!
    findById(id: ID!) : TestResponse
    refreshToken(refreshToken: String!): AuthenticationResponse
}

type Mutation{
    signUp(email: String!, firstName: String!, lastName: String!, password: String!): AuthenticationResponse
    signIn(email: String!, password: String!): AuthenticationResponse
#    authenticateWithGoogle(tokenId: String!): AuthenticationResponse
    create(testRequest: TestRequest!): SimpleResponse!
    update(id: ID!, testRequest: TestRequest!): SimpleResponse!
    delete(id: ID!) : ID
    saveQuestion(questionRequest: QuestionRequest!): SimpleResponse
}

type AuthenticationResponse {
    email: String
    token: String!
    refreshToken: String!
    role: Role
}

enum Role {
    ADMIN,
    USER
}

type SimpleResponse {
    message: String
    status: String
}

input QuestionRequest {
    testId: ID!
    title : String!
    duration : Int!
    questionType : QuestionType!
    passage : String
    correctAnswer : String
    optionRequests : [OptionRequest]

}

input OptionRequest {
    value : String!
    isTrue : Boolean!
}


type TestResponse {
    id: ID!
    title: String!
    description: String!
    enable: Boolean!
    duration: Int!

}

input TestRequest {
    title: String
    description: String
    enable: Boolean
    duration: Int
}

enum QuestionType {
    SELECT_ENGLISH_WORD,
    TYPE_WHAT_YOU_HEAR,
    DESCRIBE_IMAGE,
    LISTEN_AND_SELECT_ENGLISH_WORD,
    RECORD_SAYING_STATEMENT,
    RESPOND_N_WORDS,
    HIGHLIGHT_THE_ANSWER,
    SELECT_THE_MAIN_IDEA,
    SELECT_BEST_TITLE
}
